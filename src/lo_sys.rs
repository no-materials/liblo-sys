/* automatically generated by rust-bindgen 0.72.0 */

#![allow(dead_code, non_camel_case_types, non_upper_case_globals, non_snake_case)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOL_SMC: u32 = 286;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_RCVMARK: u32 = 75;
pub const SO_PASSPIDFD: u32 = 76;
pub const SO_PEERPIDFD: u32 = 77;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const IP_LOCAL_PORT_RANGE: u32 = 51;
pub const IP_PROTOCOL: u32 = 52;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const LO_BIGENDIAN: u32 = 0;
pub const _NETDB_H: u32 = 1;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &[u8; 17] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &[u8; 19] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &[u8; 15] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const LO_DISABLE: u32 = 0;
pub const LO_ENABLE: u32 = 1;
pub const LO_ENOPATH: u32 = 9901;
pub const LO_ENOTYPE: u32 = 9902;
pub const LO_UNKNOWNPROTO: u32 = 9903;
pub const LO_NOPORT: u32 = 9904;
pub const LO_TOOBIG: u32 = 9905;
pub const LO_INT_ERR: u32 = 9906;
pub const LO_EALLOC: u32 = 9907;
pub const LO_EINVALIDPATH: u32 = 9908;
pub const LO_EINVALIDTYPE: u32 = 9909;
pub const LO_EBADTYPE: u32 = 9910;
pub const LO_ESIZE: u32 = 9911;
pub const LO_EINVALIDARG: u32 = 9912;
pub const LO_ETERM: u32 = 9913;
pub const LO_EPAD: u32 = 9914;
pub const LO_EINVALIDBUND: u32 = 9915;
pub const LO_EINVALIDTIME: u32 = 9916;
pub const LO_MAX_MSG_SIZE: u32 = 32768;
pub const LO_MAX_UDP_MSG_SIZE: u32 = 65535;
pub const LO_DEFAULT_MAX_MSG_SIZE: u32 = 65535;
pub const LO_DEFAULT: u32 = 0;
pub const LO_UDP: u32 = 1;
pub const LO_UNIX: u32 = 2;
pub const LO_TCP: u32 = 4;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_L2TP: _bindgen_ty_4 = 115;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_4 = 143;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_4 = 262;
pub const IPPROTO_MAX: _bindgen_ty_4 = 263;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"][::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lo_split64 {
    pub all: u64,
    pub part: lo_split64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lo_split64__bindgen_ty_1 {
    pub a: u32,
    pub b: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lo_split64__bindgen_ty_1"]
        [::std::mem::size_of::<lo_split64__bindgen_ty_1>() - 8usize];
    ["Alignment of lo_split64__bindgen_ty_1"]
        [::std::mem::align_of::<lo_split64__bindgen_ty_1>() - 4usize];
    ["Offset of field: lo_split64__bindgen_ty_1::a"]
        [::std::mem::offset_of!(lo_split64__bindgen_ty_1, a) - 0usize];
    ["Offset of field: lo_split64__bindgen_ty_1::b"]
        [::std::mem::offset_of!(lo_split64__bindgen_ty_1, b) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lo_split64"][::std::mem::size_of::<lo_split64>() - 8usize];
    ["Alignment of lo_split64"][::std::mem::align_of::<lo_split64>() - 8usize];
    ["Offset of field: lo_split64::all"][::std::mem::offset_of!(lo_split64, all) - 0usize];
    ["Offset of field: lo_split64::part"][::std::mem::offset_of!(lo_split64, part) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpcent"][::std::mem::size_of::<rpcent>() - 24usize];
    ["Alignment of rpcent"][::std::mem::align_of::<rpcent>() - 8usize];
    ["Offset of field: rpcent::r_name"][::std::mem::offset_of!(rpcent, r_name) - 0usize];
    ["Offset of field: rpcent::r_aliases"][::std::mem::offset_of!(rpcent, r_aliases) - 8usize];
    ["Offset of field: rpcent::r_number"][::std::mem::offset_of!(rpcent, r_number) - 16usize];
};
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netent"][::std::mem::size_of::<netent>() - 24usize];
    ["Alignment of netent"][::std::mem::align_of::<netent>() - 8usize];
    ["Offset of field: netent::n_name"][::std::mem::offset_of!(netent, n_name) - 0usize];
    ["Offset of field: netent::n_aliases"][::std::mem::offset_of!(netent, n_aliases) - 8usize];
    ["Offset of field: netent::n_addrtype"][::std::mem::offset_of!(netent, n_addrtype) - 16usize];
    ["Offset of field: netent::n_net"][::std::mem::offset_of!(netent, n_net) - 20usize];
};
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hostent"][::std::mem::size_of::<hostent>() - 32usize];
    ["Alignment of hostent"][::std::mem::align_of::<hostent>() - 8usize];
    ["Offset of field: hostent::h_name"][::std::mem::offset_of!(hostent, h_name) - 0usize];
    ["Offset of field: hostent::h_aliases"][::std::mem::offset_of!(hostent, h_aliases) - 8usize];
    ["Offset of field: hostent::h_addrtype"][::std::mem::offset_of!(hostent, h_addrtype) - 16usize];
    ["Offset of field: hostent::h_length"][::std::mem::offset_of!(hostent, h_length) - 20usize];
    ["Offset of field: hostent::h_addr_list"]
        [::std::mem::offset_of!(hostent, h_addr_list) - 24usize];
};
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of servent"][::std::mem::size_of::<servent>() - 32usize];
    ["Alignment of servent"][::std::mem::align_of::<servent>() - 8usize];
    ["Offset of field: servent::s_name"][::std::mem::offset_of!(servent, s_name) - 0usize];
    ["Offset of field: servent::s_aliases"][::std::mem::offset_of!(servent, s_aliases) - 8usize];
    ["Offset of field: servent::s_port"][::std::mem::offset_of!(servent, s_port) - 16usize];
    ["Offset of field: servent::s_proto"][::std::mem::offset_of!(servent, s_proto) - 24usize];
};
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of protoent"][::std::mem::size_of::<protoent>() - 24usize];
    ["Alignment of protoent"][::std::mem::align_of::<protoent>() - 8usize];
    ["Offset of field: protoent::p_name"][::std::mem::offset_of!(protoent, p_name) - 0usize];
    ["Offset of field: protoent::p_aliases"][::std::mem::offset_of!(protoent, p_aliases) - 8usize];
    ["Offset of field: protoent::p_proto"][::std::mem::offset_of!(protoent, p_proto) - 16usize];
};
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 48usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 8usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 24usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 32usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 40usize];
};
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
/// \brief A structure to store OSC TimeTag values.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lo_timetag {
    /// The number of seconds since Jan 1st 1900 in the UTC timezone.
    pub sec: u32,
    /// The fractions of a second offset from above, expressed as 1/2^32nds
    /// of a second
    pub frac: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lo_timetag"][::std::mem::size_of::<lo_timetag>() - 8usize];
    ["Alignment of lo_timetag"][::std::mem::align_of::<lo_timetag>() - 4usize];
    ["Offset of field: lo_timetag::sec"][::std::mem::offset_of!(lo_timetag, sec) - 0usize];
    ["Offset of field: lo_timetag::frac"][::std::mem::offset_of!(lo_timetag, frac) - 4usize];
};
/// bundle element is a message
pub const lo_element_type_LO_ELEMENT_MESSAGE: lo_element_type = 1;
/// bundle element is a bundle
pub const lo_element_type_LO_ELEMENT_BUNDLE: lo_element_type = 2;
/// \brief An enumeration of bundle element types liblo can handle.
///
/// The element of a bundle can either be a message or an other bundle.
pub type lo_element_type = ::std::os::raw::c_uint;
/// 32 bit signed integer.
pub const lo_type_LO_INT32: lo_type = 105;
/// 32 bit IEEE-754 float.
pub const lo_type_LO_FLOAT: lo_type = 102;
/// Standard C, NULL terminated string.
pub const lo_type_LO_STRING: lo_type = 115;
/// OSC binary blob type. Accessed using the lo_blob_*() functions.
pub const lo_type_LO_BLOB: lo_type = 98;
/// 64 bit signed integer.
pub const lo_type_LO_INT64: lo_type = 104;
/// OSC TimeTag type, represented by the lo_timetag structure.
pub const lo_type_LO_TIMETAG: lo_type = 116;
/// 64 bit IEEE-754 double.
pub const lo_type_LO_DOUBLE: lo_type = 100;
/// Standard C, NULL terminated, string. Used in systems which
/// distinguish strings and symbols.
pub const lo_type_LO_SYMBOL: lo_type = 83;
/// Standard C, 8 bit, char variable.
pub const lo_type_LO_CHAR: lo_type = 99;
/// A 4 byte MIDI packet.
pub const lo_type_LO_MIDI: lo_type = 109;
/// Sybol representing the value True.
pub const lo_type_LO_TRUE: lo_type = 84;
/// Sybol representing the value False.
pub const lo_type_LO_FALSE: lo_type = 70;
/// Sybol representing the value Nil.
pub const lo_type_LO_NIL: lo_type = 78;
/// Sybol representing the value Infinitum.
pub const lo_type_LO_INFINITUM: lo_type = 73;
/// \brief An enumeration of the OSC types liblo can send and receive.
///
/// The value of the enumeration is the typechar used to tag messages and to
/// specify arguments with lo_send().
pub type lo_type = ::std::os::raw::c_uint;
/// \brief Union used to read values from incoming messages.
///
/// Types can generally be read using argv[n]->t where n is the argument number
/// and t is the type character, with the exception of strings and symbols which
/// must be read with &argv[n]->t.
#[repr(C)]
#[derive(Copy, Clone)]
pub union lo_arg {
    /// 32 bit signed integer.
    pub i: i32,
    /// 32 bit signed integer.
    pub i32_: i32,
    /// 64 bit signed integer.
    pub h: i64,
    /// 64 bit signed integer.
    pub i64_: i64,
    /// 32 bit IEEE-754 float.
    pub f: f32,
    /// 32 bit IEEE-754 float.
    pub f32_: f32,
    /// 64 bit IEEE-754 double.
    pub d: f64,
    /// 64 bit IEEE-754 double.
    pub f64_: f64,
    /// Standard C, NULL terminated string.
    pub s: ::std::os::raw::c_char,
    /// Standard C, NULL terminated, string. Used in systems which
    /// distinguish strings and symbols.
    pub S: ::std::os::raw::c_char,
    /// Standard C, 8 bit, char.
    pub c: ::std::os::raw::c_uchar,
    /// A 4 byte MIDI packet.
    pub m: [u8; 4usize],
    /// OSC TimeTag value.
    pub t: lo_timetag,
    pub blob: lo_arg__bindgen_ty_1,
}
/// Blob
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lo_arg__bindgen_ty_1 {
    pub size: i32,
    pub data: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lo_arg__bindgen_ty_1"][::std::mem::size_of::<lo_arg__bindgen_ty_1>() - 8usize];
    ["Alignment of lo_arg__bindgen_ty_1"][::std::mem::align_of::<lo_arg__bindgen_ty_1>() - 4usize];
    ["Offset of field: lo_arg__bindgen_ty_1::size"]
        [::std::mem::offset_of!(lo_arg__bindgen_ty_1, size) - 0usize];
    ["Offset of field: lo_arg__bindgen_ty_1::data"]
        [::std::mem::offset_of!(lo_arg__bindgen_ty_1, data) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lo_arg"][::std::mem::size_of::<lo_arg>() - 8usize];
    ["Alignment of lo_arg"][::std::mem::align_of::<lo_arg>() - 8usize];
    ["Offset of field: lo_arg::i"][::std::mem::offset_of!(lo_arg, i) - 0usize];
    ["Offset of field: lo_arg::i32_"][::std::mem::offset_of!(lo_arg, i32_) - 0usize];
    ["Offset of field: lo_arg::h"][::std::mem::offset_of!(lo_arg, h) - 0usize];
    ["Offset of field: lo_arg::i64_"][::std::mem::offset_of!(lo_arg, i64_) - 0usize];
    ["Offset of field: lo_arg::f"][::std::mem::offset_of!(lo_arg, f) - 0usize];
    ["Offset of field: lo_arg::f32_"][::std::mem::offset_of!(lo_arg, f32_) - 0usize];
    ["Offset of field: lo_arg::d"][::std::mem::offset_of!(lo_arg, d) - 0usize];
    ["Offset of field: lo_arg::f64_"][::std::mem::offset_of!(lo_arg, f64_) - 0usize];
    ["Offset of field: lo_arg::s"][::std::mem::offset_of!(lo_arg, s) - 0usize];
    ["Offset of field: lo_arg::S"][::std::mem::offset_of!(lo_arg, S) - 0usize];
    ["Offset of field: lo_arg::c"][::std::mem::offset_of!(lo_arg, c) - 0usize];
    ["Offset of field: lo_arg::m"][::std::mem::offset_of!(lo_arg, m) - 0usize];
    ["Offset of field: lo_arg::t"][::std::mem::offset_of!(lo_arg, t) - 0usize];
    ["Offset of field: lo_arg::blob"][::std::mem::offset_of!(lo_arg, blob) - 0usize];
};
/// \brief A reference to an OSC service.
///
/// Created by calls to lo_address_new() or lo_address_new_from_url().
pub type lo_address = *mut ::std::os::raw::c_void;
/// \brief A object to store an opaque binary data object.
///
/// Can be passed over OSC using the 'b' type. Created by calls to lo_blob_new().
pub type lo_blob = *mut ::std::os::raw::c_void;
/// \brief A low-level object used to represent messages passed over OSC.
///
/// Created by calls to lo_message_new(), arguments can be added with calls to
/// lo_message_add_*().
pub type lo_message = *mut ::std::os::raw::c_void;
/// \brief A low-level object used to represent bundles of messages passed over
/// OSC.
///
/// Created by calls to lo_bundle_new(), messages can be added with calls to
/// lo_bundle_add_message().
pub type lo_bundle = *mut ::std::os::raw::c_void;
/// \brief An object representing an method on a server.
///
/// Returned by calls to lo_server_thread_add_method() and
/// lo_server_add_method().
pub type lo_method = *mut ::std::os::raw::c_void;
/// \brief An object representing an instance of an OSC server.
///
/// Created by calls to lo_server_new(). If you wish to have the server
/// operate in a background thread, use lo_server_thread instead.
pub type lo_server = *mut ::std::os::raw::c_void;
/// \brief An object representing a thread containing an OSC server.
///
/// Created by calls to lo_server_thread_new().
pub type lo_server_thread = *mut ::std::os::raw::c_void;
/// \brief A callback function to receive notification of an error in a server or
/// server thread.
///
/// On callback the parameters will be set to the following values:
///
/// \param num An error number that can be used to identify this condition.
/// \param msg An error message describing the condidtion.
/// \param where A string describing the place the error occured - typically
/// either a function call or method path.
pub type lo_err_handler = ::std::option::Option<
    unsafe extern "C" fn(
        num: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
        where_: *const ::std::os::raw::c_char,
    ),
>;
/// \brief A callback function to receive notification of matching message
/// arriving in the server or server thread.
///
/// The return value tells the method dispatcher whether this handler
/// has dealt with the message correctly: a return value of 0 indicates
/// that it has been handled, and it should not attempt to pass it on
/// to any other handlers, non-0 means that it has not been handled and
/// the dispatcher will attempt to find more handlers that match the
/// path and types of the incoming message.
///
/// On callback the paramters will be set to the following values:
///
/// \param path That path that the incoming message was sent to
/// \param types If you specided types in your method creation call then this
/// will match those and the incoming types will have been coerced to match,
/// otherwise it will be the types of the arguments of the incoming message.
/// \param argv An array of lo_arg types containing the values, e.g. if the
/// first argument of the incoming message is of type 'f' then the value will be
/// found in argv[0]->f.
/// \param argc The number of arguments received.
/// \param msg A structure containing the original raw message as received. No
/// type coercion will have occured and the data will be in OSC byte order
/// (bigendian).
/// \param user_data This contains the user_data value passed in the call to
/// lo_server_thread_add_method.
pub type lo_method_handler = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
        argv: *mut *mut lo_arg,
        argc: ::std::os::raw::c_int,
        msg: lo_message,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
/// \brief A callback function to receive notification of a bundle being
/// dispatched by the server or server thread.
///
/// This callback allows applications to be aware of incoming bundles
/// and preserve ordering and atomicity of messages in bundles.
///
/// If installed with lo_server_add_bundle_handlers, this callback will be
/// called with \a time set to the time tag of the bundle, and \a user_data
/// set to the user_data parameter passed to lo_server_add_bundle_handlers.
///
/// Note that bundles may be nested, in which case calls to the bundle start
/// and end handlers will also be nested.  The application can keep track of
/// nested bundles in a stack-like manner by treating the start handler as
/// "push" and the end handler as "pop".  For example, a bundle containing two
/// bundles would fire 6 callbacks: begin, begin, end, begin, end, end.
pub type lo_bundle_start_handler = ::std::option::Option<
    unsafe extern "C" fn(
        time: lo_timetag,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
/// \brief A callback function to receive notification of a bundle dispatch
/// being completed by the server or server thread.
///
/// If installed with lo_server_add_bundle_handlers, this callback will be
/// called after all the messages of a bundle have been dispatched with
/// \a user_data set to the user_data parameter passed to
/// lo_server_add_bundle_handlers.
pub type lo_bundle_end_handler = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
/// \brief A callback function to perform initialization when the
/// server thread is started.
///
/// If installed with lo_server_thread_set_callbacks, this callback
/// will be called in the server thread, just before the server starts
/// listening for events. \a user_data is set to the user_data
/// parameter passed to lo_server_thread_add_functions.
///
/// If the return value is non-zero, the thread start will be aborted.
pub type lo_server_thread_init_callback = ::std::option::Option<
    unsafe extern "C" fn(
        s: lo_server_thread,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
/// \brief A callback function to perform cleanup when the server
/// thread is started.
///
/// If installed with lo_server_thread_set_callbacks, this callback
/// will be called in the server thread, after the server have stopped
/// listening and processing events, before it quits. \a user_data is
/// set to the user_data parameter passed to
/// lo_server_thread_add_functions.
pub type lo_server_thread_cleanup_callback = ::std::option::Option<
    unsafe extern "C" fn(s: lo_server_thread, user_data: *mut ::std::os::raw::c_void),
>;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
/// \brief Type used to represent numerical values in conversions between OSC
/// types.
pub type lo_hires = u128;
extern "C" {
    /// \brief Send a lo_message object to target targ
    ///
    /// This is slightly more efficient than lo_send() if you want to send a lot of
    /// similar messages. The messages are constructed with the lo_message_new() and
    /// \ref lo_message_add_int32 "lo_message_add*()" functions.
    pub fn lo_send_message(
        targ: lo_address,
        path: *const ::std::os::raw::c_char,
        msg: lo_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Send a lo_message object to target targ from address of serv
    ///
    /// This is slightly more efficient than lo_send() if you want to send a lot of
    /// similar messages. The messages are constructed with the lo_message_new() and
    /// \ref lo_message_add_int32 "lo_message_add*()" functions.
    ///
    /// \param targ The address to send the message to
    /// \param serv The server socket to send the message from
    ///              (can be NULL to use new socket)
    /// \param path The path to send the message to
    /// \param msg  The bundle itself
    pub fn lo_send_message_from(
        targ: lo_address,
        serv: lo_server,
        path: *const ::std::os::raw::c_char,
        msg: lo_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Send a lo_bundle object to address targ
    ///
    /// Bundles are constructed with the
    /// lo_bundle_new() and lo_bundle_add_message() functions.
    pub fn lo_send_bundle(targ: lo_address, b: lo_bundle) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Send a lo_bundle object to address targ from address of serv
    ///
    /// Bundles are constructed with the
    /// lo_bundle_new() and lo_bundle_add_message() functions.
    ///
    /// \param targ The address to send the bundle to
    /// \param serv The server socket to send the bundle from
    ///              (can be NULL to use new socket)
    /// \param b    The bundle itself
    pub fn lo_send_bundle_from(
        targ: lo_address,
        serv: lo_server,
        b: lo_bundle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Create a new lo_message object
    pub fn lo_message_new() -> lo_message;
}
extern "C" {
    /// \brief  Add one to a message's reference count.
    ///
    /// Messages are reference counted. If a message is multiply referenced,
    /// the message's counter should be incremented. It is automatically
    /// decremented by lo_message_free lo_message_free_recursive, with
    /// lo_message_free_recursive being the preferable method.
    pub fn lo_message_incref(m: lo_message);
}
extern "C" {
    /// \brief Create a new lo_message object by cloning an already existing one
    pub fn lo_message_clone(m: lo_message) -> lo_message;
}
extern "C" {
    /// \brief Free memory allocated by lo_message_new() and any subsequent
    /// \ref lo_message_add_int32 lo_message_add*() calls.
    pub fn lo_message_free(m: lo_message);
}
extern "C" {
    /// \brief Append a number of arguments to a message.
    ///
    /// The data will be added in OSC byteorder (bigendian).
    ///
    /// \param m The message to be extended.
    /// \param types The types of the data items in the message, types are defined in
    /// lo_types_common.h
    /// \param ... The data values to be transmitted. The types of the arguments
    /// passed here must agree with the types specified in the type parameter.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add(
        m: lo_message,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \internal \brief the real message_add function (don't call directly)
    pub fn lo_message_add_internal(
        m: lo_message,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Append a varargs list to a message.
    ///
    /// The data will be added in OSC byteorder (bigendian).
    /// IMPORTANT: args list must be terminated with LO_ARGS_END, or this call will
    /// fail.  This is used to do simple error checking on the sizes of parameters
    /// passed.
    ///
    /// \param m The message to be extended.
    /// \param types The types of the data items in the message, types are defined in
    /// lo_types_common.h
    /// \param ap The va_list created by a C function declared with an
    /// ellipsis (...) argument, and pre-initialised with
    /// "va_start(ap)". The types of the arguments passed here must agree
    /// with the types specified in the type parameter.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_varargs(
        m: lo_message,
        types: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \internal \brief the real message_add_varargs function (don't call directly)
    pub fn lo_message_add_varargs_internal(
        m: lo_message,
        types: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Append a data item and typechar of the specified type to a message.
    ///
    /// The data will be added in OSC byteorder (bigendian).
    ///
    /// \param m The message to be extended.
    /// \param a The data item.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_int32(m: lo_message, a: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_float(m: lo_message, a: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_string(
        m: lo_message,
        a: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_blob(m: lo_message, a: lo_blob) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_int64(m: lo_message, a: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_timetag(m: lo_message, a: lo_timetag) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_double(m: lo_message, a: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_symbol(
        m: lo_message,
        a: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_char(m: lo_message, a: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_midi(m: lo_message, a: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_true(m: lo_message) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_false(m: lo_message) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_nil(m: lo_message) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Append a data item and typechar of the specified type to a message.
    /// See lo_message_add_int32() for details.
    ///
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_message_add_infinitum(m: lo_message) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Returns the source (lo_address) of an incoming message.
    ///
    /// Returns NULL if the message is outgoing. Do not free the returned address.
    pub fn lo_message_get_source(m: lo_message) -> lo_address;
}
extern "C" {
    /// \brief  Returns the timestamp (lo_timetag *) of a bundled incoming message.
    ///
    /// Returns LO_TT_IMMEDIATE if the message is outgoing, or did not arrive
    /// contained in a bundle. Do not free the returned timetag.
    pub fn lo_message_get_timestamp(m: lo_message) -> lo_timetag;
}
extern "C" {
    /// \brief  Return the message type tag string.
    ///
    /// The result is valid until further data is added with lo_message_add*().
    pub fn lo_message_get_types(m: lo_message) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief  Return the message argument count.
    ///
    /// The result is valid until further data is added with lo_message_add*().
    pub fn lo_message_get_argc(m: lo_message) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Return the message arguments. Do not free the returned data.
    ///
    /// The result is valid until further data is added with lo_message_add*().
    pub fn lo_message_get_argv(m: lo_message) -> *mut *mut lo_arg;
}
extern "C" {
    /// \brief  Return the length of a message in bytes.
    ///
    /// \param m The message to be sized
    /// \param path The path the message will be sent to
    pub fn lo_message_length(m: lo_message, path: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    /// \brief  Serialise the lo_message object to an area of memory and return a
    /// pointer to the serialised form.  Opposite of lo_message_deserialise().
    ///
    /// \param m The message to be serialised
    /// \param path The path the message will be sent to
    /// \param to The address to serialise to, memory will be allocated if to is
    /// NULL.
    /// \param size If this pointer is non-NULL the size of the memory area
    /// will be written here
    ///
    /// The returned form is suitable to be sent over a low level OSC transport,
    /// having the correct endianess and bit-packed structure.
    pub fn lo_message_serialise(
        m: lo_message,
        path: *const ::std::os::raw::c_char,
        to: *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// \brief  Deserialise a raw OSC message and return a new lo_message object.
    /// Opposite of lo_message_serialise().
    ///
    /// \param data Pointer to the raw OSC message data in network transmission form
    /// (network byte order where appropriate).
    /// \param size The size of data in bytes
    /// \param result If this pointer is non-NULL, the result or error code will
    /// be written here.
    ///
    /// Returns a new lo_message, or NULL if deserialisation fails.
    /// Use lo_message_free() to free the resulting object.
    pub fn lo_message_deserialise(
        data: *mut ::std::os::raw::c_void,
        size: usize,
        result: *mut ::std::os::raw::c_int,
    ) -> lo_message;
}
extern "C" {
    /// \brief  Dispatch a raw block of memory containing an OSC message.
    ///
    /// This is useful when a raw block of memory is available that is
    /// structured as OSC, and you wish to use liblo to dispatch the
    /// message to a handler function as if it had been received over the
    /// network.
    ///
    /// \param s The lo_server to use for dispatching.
    /// \param data Pointer to the raw OSC message data in network transmission form
    /// (network byte order where appropriate).
    /// \param size The size of data in bytes
    ///
    /// Returns the number of bytes used if successful, or less than 0 otherwise.
    pub fn lo_server_dispatch_data(
        s: lo_server,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Return the hostname of a lo_address object
    ///
    /// Returned value must not be modified or free'd. Value will be a dotted quad,
    /// colon'd IPV6 address, or resolvable name.
    pub fn lo_address_get_hostname(a: lo_address) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// \brief  Return the port/service name of a lo_address object
    ///
    /// Returned value must not be modified or free'd. Value will be a service name
    /// or ASCII representation of the port number.
    pub fn lo_address_get_port(a: lo_address) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// \brief  Return the protocol of a lo_address object
    ///
    /// Returned value will be one of LO_UDP, LO_TCP or LO_UNIX.
    pub fn lo_address_get_protocol(a: lo_address) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Return a URL representing an OSC address
    ///
    /// Returned value must be free'd.
    pub fn lo_address_get_url(a: lo_address) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Set the Time-to-Live value for a given target address.
    ///
    /// This is required for sending multicast UDP messages.  A value of 1
    /// (the usual case) keeps the message within the subnet, while 255
    /// means a global, unrestricted scope.
    ///
    /// \param t An OSC address.
    /// \param ttl An integer specifying the scope of a multicast UDP message.
    pub fn lo_address_set_ttl(t: lo_address, ttl: ::std::os::raw::c_int);
}
extern "C" {
    /// \brief Get the Time-to-Live value for a given target address.
    ///
    /// \param t An OSC address.
    /// \return An integer specifying the scope of a multicast UDP message.
    pub fn lo_address_get_ttl(t: lo_address) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Set the network interface to use for a given target address.
    ///
    /// The caller should specify either the iface or ip variable.  The IP,
    /// if specified, should match the same network family as the OSC
    /// address.  (That is, should correctly correspond to IPv4 or IPv6.)
    /// Typically the assigned network interface will only be used in the
    /// case of sending multicast messages.  It is recommended to use the
    /// if_nameindex POSIX function to get a list of network interface
    /// names.
    ///
    /// \param t An OSC address.
    /// \param iface The name of a network interface on the local system.
    /// \param ip The IP address of a network interface on the local system.
    /// \return 0 if the interface was successfully identified, or non-zero
    ///         otherwise.
    pub fn lo_address_set_iface(
        t: lo_address,
        iface: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Get the name of the network interface assigned to an OSC address.
    ///
    /// \param t An OSC address.
    /// \return A string pointer or 0 if no interface has been assigned.
    ///         Caller should not modify the provided string.  It is a
    ///         legal pointer until the next call to lo_address_set_iface
    ///         or lo_address_free.
    pub fn lo_address_get_iface(t: lo_address) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Set the TCP_NODELAY flag on outgoing TCP connections.
    /// \param t The address to set this flag for.
    /// \param enable Non-zero to set the flag, zero to unset it.
    /// \return the previous value of this flag.
    pub fn lo_address_set_tcp_nodelay(
        t: lo_address,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Set outgoing stream connections (e.g., TCP) to be
    ///        transmitted using the SLIP packetizing protocol.
    /// \param t The address to set this flag for.
    /// \param enable Non-zero to set the flag, zero to unset it.
    /// \return the previous value of this flag.
    pub fn lo_address_set_stream_slip(
        t: lo_address,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Create a new bundle object.
    ///
    /// OSC Bundles encapsulate one or more OSC messages and may include a timestamp
    /// indicating when the bundle should be dispatched.
    ///
    /// \param tt The timestamp when the bundle should be handled by the receiver.
    ///           Pass LO_TT_IMMEDIATE if you want the receiving server to dispatch
    ///           the bundle as soon as it receives it.
    pub fn lo_bundle_new(tt: lo_timetag) -> lo_bundle;
}
extern "C" {
    /// \brief  Add one to a bundle's reference count.
    ///
    /// Bundles are reference counted. If a bundle is multiply referenced,
    /// the bundle's counter should be incremented. It is automatically
    /// decremented by lo_bundle_free lo_bundle_free_recursive, with
    /// lo_bundle_free_recursive being the preferable method.
    pub fn lo_bundle_incref(b: lo_bundle);
}
extern "C" {
    /// \brief  Adds an OSC message to an existing bundle.
    ///
    /// The message passed is appended to the list of messages in the bundle to be
    /// dispatched to 'path'.
    ///
    /// \return 0 if successful, less than 0 otherwise.
    pub fn lo_bundle_add_message(
        b: lo_bundle,
        path: *const ::std::os::raw::c_char,
        m: lo_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Adds an OSC bundle to an existing bundle.
    ///
    /// The child bundle passed is appended to the list of child bundles|messages in the parent bundle to be
    /// dispatched.
    ///
    /// \return 0 if successful, less than 0 otherwise.
    pub fn lo_bundle_add_bundle(b: lo_bundle, n: lo_bundle) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Return the length of a bundle in bytes.
    ///
    /// Includes the marker and typetag length.
    ///
    /// \param b The bundle to be sized
    pub fn lo_bundle_length(b: lo_bundle) -> usize;
}
extern "C" {
    /// \brief  Return the number of top-level elements in a bundle.
    ///
    /// \param b The bundle to be counted.
    pub fn lo_bundle_count(b: lo_bundle) -> ::std::os::raw::c_uint;
}
extern "C" {
    /// \brief  Gets the element type contained within a bundle.
    ///
    /// Returns a lo_element_type at a given index within a bundle.
    ///
    /// \return The requested lo_element_type if successful, otherwise 0.
    pub fn lo_bundle_get_type(b: lo_bundle, index: ::std::os::raw::c_int) -> lo_element_type;
}
extern "C" {
    /// \brief  Gets a nested bundle contained within a bundle.
    ///
    /// Returns a lo_bundle at a given index within a bundle.
    ///
    /// \return The requested lo_bundle if successful, otherwise 0.
    pub fn lo_bundle_get_bundle(b: lo_bundle, index: ::std::os::raw::c_int) -> lo_bundle;
}
extern "C" {
    /// \brief  Gets a message contained within a bundle.
    ///
    /// Returns a lo_message at a given index within a bundle, and
    /// optionally the path associated with that message.
    ///
    /// \return The requested lo_message if successful, otherwise 0.
    pub fn lo_bundle_get_message(
        b: lo_bundle,
        index: ::std::os::raw::c_int,
        path: *mut *const ::std::os::raw::c_char,
    ) -> lo_message;
}
extern "C" {
    /// \brief  Get the timestamp associated with a bundle.
    ///
    /// \param b The bundle for which the timestamp should be returned.
    ///
    /// \return The timestamp of the bundle as a lo_timetag.
    pub fn lo_bundle_get_timestamp(b: lo_bundle) -> lo_timetag;
}
extern "C" {
    /// \brief  Serialise the bundle object to an area of memory and return a
    /// pointer to the serialised form.
    ///
    /// \param b The bundle to be serialised
    /// \param to The address to serialise to, memory will be allocated if to is
    /// NULL.
    /// \param size If this pointer is non-NULL the size of the memory area
    /// will be written here
    ///
    /// The returned form is suitable to be sent over a low level OSC transport,
    /// having the correct endianess and bit-packed structure.
    pub fn lo_bundle_serialise(
        b: lo_bundle,
        to: *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// \brief  Frees the memory taken by a bundle object.
    ///
    /// \param b The bundle to be freed.
    pub fn lo_bundle_free(b: lo_bundle);
}
extern "C" {
    /// \brief  Frees the memory taken by a bundle object and its messages and nested bundles recursively.
    ///
    /// \param b The bundle, which may contain messages and nested bundles, to be freed.
    pub fn lo_bundle_free_recursive(b: lo_bundle);
}
extern "C" {
    /// \brief  Obsolete, use lo_bundle_free_recursive instead.
    ///
    /// \param b The bundle, which may contain messages and nested bundles, to be freed.
    pub fn lo_bundle_free_messages(b: lo_bundle);
}
extern "C" {
    /// \brief Return true if the type specified has a numerical value, such as
    /// LO_INT32, LO_FLOAT etc.
    ///
    /// \param a The type to be tested.
    pub fn lo_is_numerical_type(a: lo_type) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return true if the type specified has a textual value, such as
    /// LO_STRING or LO_SYMBOL.
    ///
    /// \param a The type to be tested.
    pub fn lo_is_string_type(a: lo_type) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Attempt to convert one OSC type to another.
    ///
    /// Numerical types (eg LO_INT32, LO_FLOAT etc.) may be converted to other
    /// numerical types and string types (LO_STRING and LO_SYMBOL) may be converted
    /// to the other type. This is done automatically if a received message matches
    /// the path, but not the exact types, and is coercible (ie. all numerical
    /// types in numerical positions).
    ///
    /// On failure no translation occurs and false is returned.
    ///
    /// \param type_to   The type of the destination variable.
    /// \param to        A pointer to the destination variable.
    /// \param type_from The type of the source variable.
    /// \param from      A pointer to the source variable.
    pub fn lo_coerce(
        type_to: lo_type,
        to: *mut lo_arg,
        type_from: lo_type,
        from: *mut lo_arg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the numerical value of the given argument with the
    /// maximum native system precision.
    pub fn lo_hires_val(type_: lo_type, p: *mut lo_arg) -> lo_hires;
}
extern "C" {
    /// \brief Create a new server instance.
    ///
    /// Using lo_server_recv(), lo_servers block until they receive OSC
    /// messages.  If you want non-blocking behaviour see
    /// lo_server_recv_noblock() or the \ref lo_server_thread_new
    /// "lo_server_thread_*" functions.
    ///
    /// \param port If NULL is passed then an unused UDP port will be chosen by the
    /// system, its number may be retrieved with lo_server_thread_get_port()
    /// so it can be passed to clients. Otherwise a decimal port number, service
    /// name or UNIX domain socket path may be passed.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    pub fn lo_server_new(port: *const ::std::os::raw::c_char, err_h: lo_err_handler) -> lo_server;
}
extern "C" {
    /// \brief Create a new server instance, specifying protocol.
    ///
    /// Using lo_server_recv(), lo_servers block until they receive OSC
    /// messages.  If you want non-blocking behaviour see
    /// lo_server_recv_noblock() or the \ref lo_server_thread_new
    /// "lo_server_thread_*" functions.
    ///
    /// \param port If using UDP then NULL may be passed to find an unused port.
    /// Otherwise a decimal port number orservice name or may be passed.
    /// If using UNIX domain sockets then a socket path should be passed here.
    /// \param proto The protocol to use, should be one of LO_UDP, LO_TCP or LO_UNIX.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    pub fn lo_server_new_with_proto(
        port: *const ::std::os::raw::c_char,
        proto: ::std::os::raw::c_int,
        err_h: lo_err_handler,
    ) -> lo_server;
}
extern "C" {
    /// \brief Create a new server instance, and join a UDP multicast group.
    ///
    /// \param group The multicast group to join.  See documentation on IP
    /// multicast for the acceptable address range; e.g., http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    /// \param port If using UDP then NULL may be passed to find an unused port.
    /// Otherwise a decimal port number or service name or may be passed.
    /// If using UNIX domain sockets then a socket path should be passed here.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    pub fn lo_server_new_multicast(
        group: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server;
}
extern "C" {
    /// \brief Create a new server instance, and join a UDP multicast
    /// group, optionally specifying which network interface to use.
    /// Note that usually only one of iface or ip are specified.
    ///
    /// \param group The multicast group to join.  See documentation on IP
    /// multicast for the acceptable address range; e.g., http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    /// \param port If using UDP then NULL may be passed to find an unused port.
    /// Otherwise a decimal port number or service name or may be passed.
    /// If using UNIX domain sockets then a socket path should be passed here.
    /// \param iface A string specifying the name of a network interface to
    /// use, or zero if not specified.
    /// \param ip A string specifying the IP address of a network interface
    /// to use, or zero if not specified.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    pub fn lo_server_new_multicast_iface(
        group: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        iface: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server;
}
extern "C" {
    /// \brief Create a new server instance, taking port and the optional
    /// multicast group IP from an URL string.
    ///
    /// \param url The URL to specify the server parameters.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    /// \return A new lo_server instance.
    pub fn lo_server_new_from_url(
        url: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server;
}
extern "C" {
    /// \brief Enables or disables type coercion during message dispatch.
    /// \param server The server to toggle this option for.
    /// \param enable Non-zero to enable, or zero to disable type coercion.
    /// \return The previous value of this option.
    pub fn lo_server_enable_coercion(
        server: lo_server,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Free up memory used by the lo_server object
    pub fn lo_server_free(s: lo_server);
}
extern "C" {
    /// \brief Wait for an OSC message to be received
    ///
    /// \param s The server to wait for connections on.
    /// \param timeout A timeout in milliseconds to wait for the incoming packet.
    /// a value of 0 will return immediately.
    ///
    /// The return value is 1 if there is a message waiting or 0 if
    /// there is no message. If there is a message waiting you can now
    /// call lo_server_recv() to receive that message.
    pub fn lo_server_wait(s: lo_server, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Wait on multiple servers for an OSC message to be received
    ///
    /// \param s An array of servers to wait for connections on.
    /// \param status An array to receive the status of each server.
    /// \param num_servers The number of servers in the array s.
    /// \param timeout A timeout in milliseconds to wait for the incoming packet.
    /// a value of 0 will return immediately.
    ///
    /// The return value is the number of servers with a message waiting or
    /// 0 if there is no message. If there is a message waiting you can now
    /// call lo_server_recv() to receive that message.
    pub fn lo_servers_wait(
        s: *mut lo_server,
        status: *mut ::std::os::raw::c_int,
        num_servers: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Look for an OSC message waiting to be received
    ///
    /// \param s The server to wait for connections on.
    /// \param timeout A timeout in milliseconds to wait for the incoming packet.
    /// a value of 0 will return immediately.
    ///
    /// The return value is the number of bytes in the received message or 0 if
    /// there is no message. The message will be dispatched to a matching method
    /// if one is found.
    pub fn lo_server_recv_noblock(
        s: lo_server,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Look for an OSC message waiting to be received on multiple servers
    ///
    /// \param s As array of servers to wait for connections on.
    /// \param recvd An array to store the number of bytes received by each server
    /// in array s.
    /// \param num_servers The number of servers in the array s.
    /// \param timeout A timeout in milliseconds to wait for the incoming packet.
    /// a value of 0 will return immediately.
    ///
    /// The return value is the total number of bytes received by all servers.
    /// The messages will be dispatched to a matching method if one is found.
    pub fn lo_servers_recv_noblock(
        s: *mut lo_server,
        recvd: *mut ::std::os::raw::c_int,
        num_servers: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Block, waiting for an OSC message to be received
    ///
    /// The return value is the number of bytes in the received message. The message
    /// will be dispatched to a matching method if one is found.
    pub fn lo_server_recv(s: lo_server) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Add an OSC method to the specifed server.
    ///
    /// \param s The server the method is to be added to.
    /// \param path The OSC path to register the method to. If NULL is passed the
    /// method will match all paths.
    /// \param typespec The typespec the method accepts. Incoming messages with
    /// similar typespecs (e.g. ones with numerical types in the same position) will
    /// be coerced to the typespec given here.
    /// \param h The method handler callback function that will be called if a
    /// matching message is received
    /// \param user_data A value that will be passed to the callback function, h,
    /// when its invoked matching from this method.
    /// \return A unique pointer identifying the method.  It should not be freed.
    pub fn lo_server_add_method(
        s: lo_server,
        path: *const ::std::os::raw::c_char,
        typespec: *const ::std::os::raw::c_char,
        h: lo_method_handler,
        user_data: *const ::std::os::raw::c_void,
    ) -> lo_method;
}
extern "C" {
    /// \brief Delete an OSC method from the specified server.
    ///
    /// \param s The server the method is to be removed from.
    /// \param path The OSC path of the method to delete. If NULL is passed the
    /// method will match the generic handler.
    /// \param typespec The typespec the method accepts.
    pub fn lo_server_del_method(
        s: lo_server,
        path: *const ::std::os::raw::c_char,
        typespec: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Delete a specific OSC method from the specified server.
    ///
    /// \param s The server the method is to be removed from.
    /// \param m The lo_method identifier returned from lo_server_add_method for
    ///          the method to delete from the server.
    /// \return Non-zero if it was not found in the list of methods for the server.
    pub fn lo_server_del_lo_method(s: lo_server, m: lo_method) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Add bundle notification handlers to the specified server.
    ///
    /// \param s The server the method is to be added to.
    /// \param sh The callback function that will be called before the messages
    /// of a bundle are dispatched
    /// \param eh The callback function that will be called after the messages
    /// of a bundle are dispatched
    /// \param user_data A value that will be passed to the user_data parameter
    /// of both callback functions.
    pub fn lo_server_add_bundle_handlers(
        s: lo_server,
        sh: lo_bundle_start_handler,
        eh: lo_bundle_end_handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the file descriptor of the server socket.
    ///
    /// If the server protocol supports exposing the server's underlying
    /// receive mechanism for monitoring with select() or poll(), this function
    /// returns the file descriptor needed, otherwise, it returns -1.
    ///
    /// WARNING: when using this function beware that not all OSC packets that are
    /// received are dispatched immediately. lo_server_events_pending() and
    /// lo_server_next_event_delay() can be used to tell if there are pending
    /// events and how long before you should attempt to receive them.
    pub fn lo_server_get_socket_fd(s: lo_server) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the port number that the server has bound to.
    ///
    /// Useful when NULL is passed for the port number and you wish to know how to
    /// address the server.
    pub fn lo_server_get_port(s: lo_server) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief  Return the protocol that the server is using.
    ///
    /// Returned value will be one of LO_UDP, LO_TCP or LO_UNIX.
    pub fn lo_server_get_protocol(s: lo_server) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return an OSC URL that can be used to contact the server.
    ///
    /// The return value should be free()'d when it is no longer needed.
    pub fn lo_server_get_url(s: lo_server) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Toggle event queue.
    /// If queueing is enabled, timetagged messages that are sent in
    /// advance of the current time will be put on an internal queue, and
    /// they will be dispatched at the indicated time.  By default,
    /// queueing is enabled.  Use this function to disable it, if it is
    /// desired to have a server process messages immediately.  In that
    /// case, use lo_message_get_timestamp() to get the message timestamp
    /// from within a method handler.
    /// \param s A liblo server
    /// \param queue_enabled Zero to disable queue, non-zero to enable.
    /// \param dispatch_remaining If non-zero, previously queued messages
    ///                           will be immediately dispatched when queue
    ///                           is disabled.
    /// \return The previous state of queue behaviour.  Zero if queueing
    ///         was previously disabled, non-zero otherwise.
    pub fn lo_server_enable_queue(
        s: lo_server,
        queue_enabled: ::std::os::raw::c_int,
        dispatch_remaining: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return true if there are scheduled events (eg. from bundles)
    /// waiting to be dispatched by the server
    pub fn lo_server_events_pending(s: lo_server) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the time in seconds until the next scheduled event.
    ///
    /// If the delay is greater than 100 seconds then it will return 100.0.
    pub fn lo_server_next_event_delay(s: lo_server) -> f64;
}
extern "C" {
    /// \brief Set the maximum message size accepted by a server.
    ///
    /// For UDP servers, the maximum message size cannot exceed 64k, due to
    /// the UDP transport specifications.  For TCP servers, this number may
    /// be larger, but be aware that one or more contiguous blocks of
    /// memory of this size may be allocated by liblo.  (At least one per
    /// connection.)
    ///
    /// \param s The server on which to operate.
    /// \param req_size The new maximum message size to request, 0 if it
    /// should not be modified, or -1 if it should be set to unlimited.
    /// Note that an unlimited message buffer may make your application
    /// open to a denial of service attack.
    /// \return The new maximum message size is returned, which may or may
    /// not be equal to req_size.  If -1 is returned, maximum size is
    /// unlimited.
    pub fn lo_server_max_msg_size(
        s: lo_server,
        req_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the protocol portion of an OSC URL, eg. udp, tcp.
    ///
    /// This library uses OSC URLs of the form: osc.prot://hostname:port/path if the
    /// prot part is missing, UDP is assumed.
    ///
    /// The return value should be free()'d when it is no longer needed.
    pub fn lo_url_get_protocol(url: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Return the protocol ID of an OSC URL.
    ///
    /// This library uses OSC URLs of the form: osc.prot://hostname:port/path if the
    /// prot part is missing, UDP is assumed.
    /// Returned value will be one of LO_UDP, LO_TCP, LO_UNIX or -1.
    ///
    /// \return An integer specifying the protocol. Return -1 when the protocol is
    /// not supported by liblo.
    pub fn lo_url_get_protocol_id(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the hostname portion of an OSC URL.
    ///
    /// The return value should be free()'d when it is no longer needed.
    pub fn lo_url_get_hostname(url: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Return the port portion of an OSC URL.
    ///
    /// The return value should be free()'d when it is no longer needed.
    pub fn lo_url_get_port(url: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Return the path portion of an OSC URL.
    ///
    /// The return value should be free()'d when it is no longer needed.
    pub fn lo_url_get_path(url: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief A function to calculate the amount of OSC message space required by a
    /// C char *.
    ///
    /// Returns the storage size in bytes, which will always be a multiple of four.
    pub fn lo_strsize(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief A function to calculate the amount of OSC message space required by a
    /// lo_blob object.
    ///
    /// Returns the storage size in bytes, which will always be a multiple of four.
    pub fn lo_blobsize(b: lo_blob) -> u32;
}
extern "C" {
    /// \brief Test a string against an OSC pattern glob
    ///
    /// \param str The string to test
    /// \param p   The pattern to test against
    pub fn lo_pattern_match(
        str_: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \internal \brief the real send function (don't call directly)
    pub fn lo_send_internal(
        t: lo_address,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \internal \brief the real send_timestamped function (don't call directly)
    pub fn lo_send_timestamped_internal(
        t: lo_address,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        ts: lo_timetag,
        path: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \internal \brief the real lo_send_from() function (don't call directly)
    pub fn lo_send_from_internal(
        targ: lo_address,
        from: lo_server,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        ts: lo_timetag,
        path: *const ::std::os::raw::c_char,
        types: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Find the time difference between two timetags
    ///
    /// Returns a - b in seconds.
    pub fn lo_timetag_diff(a: lo_timetag, b: lo_timetag) -> f64;
}
extern "C" {
    /// \brief Return a timetag for the current time
    ///
    /// On exit the timetag pointed to by t is filled with the OSC
    /// representation of this instant in time.
    pub fn lo_timetag_now(t: *mut lo_timetag);
}
extern "C" {
    /// \brief Return the storage size, in bytes, of the given argument.
    pub fn lo_arg_size(type_: lo_type, data: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    /// \brief Given a raw OSC message, return the message path.
    ///
    /// \param data      A pointer to the raw OSC message data.
    /// \param size      The size of data in bytes (total buffer bytes).
    ///
    /// Returns the message path or NULL if an error occurs.
    /// Do not free() the returned pointer.
    pub fn lo_get_path(
        data: *mut ::std::os::raw::c_void,
        size: isize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Convert the specified argument to host byte order where necessary.
    ///
    /// \param type The OSC type of the data item (eg. LO_FLOAT).
    /// \param data A pointer to the data item to be converted. It is changed
    /// in-place.
    pub fn lo_arg_host_endian(type_: lo_type, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// \brief Convert the specified argument to network byte order where necessary.
    ///
    /// \param type The OSC type of the data item (eg. LO_FLOAT).
    /// \param data A pointer to the data item to be converted. It is changed
    /// in-place.
    pub fn lo_arg_network_endian(type_: lo_type, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// \brief Pretty-print a lo_bundle object.
    pub fn lo_bundle_pp(b: lo_bundle);
}
extern "C" {
    /// \brief Pretty-print a lo_message object.
    pub fn lo_message_pp(m: lo_message);
}
extern "C" {
    /// \brief Pretty-print a set of typed arguments.
    /// \param type A type string in the form provided to lo_send().
    /// \param data An OSC data pointer, like that provided in the
    /// lo_method_handler.
    pub fn lo_arg_pp(type_: lo_type, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// \brief Pretty-print a lo_server object.
    pub fn lo_server_pp(s: lo_server);
}
extern "C" {
    /// \brief Pretty-print a lo_method object.
    pub fn lo_method_pp(m: lo_method);
}
extern "C" {
    /// \brief Pretty-print a lo_method object, but prepend a given prefix
    /// to all field names.
    pub fn lo_method_pp_prefix(m: lo_method, p: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief Create a new server thread to handle incoming OSC
    /// messages.
    ///
    /// Server threads take care of the message reception and dispatch by
    /// transparently creating a system thread to handle incoming messages.
    /// Use this if you do not want to handle the threading yourself.
    ///
    /// \param port If NULL is passed then an unused port will be chosen by the
    /// system, its number may be retrieved with lo_server_thread_get_port()
    /// so it can be passed to clients. Otherwise a decimal port number, service
    /// name or UNIX domain socket path may be passed.
    /// \param err_h A function that will be called in the event of an error being
    /// raised. The function prototype is defined in lo_types.h
    pub fn lo_server_thread_new(
        port: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server_thread;
}
extern "C" {
    /// \brief Create a new server thread to handle incoming OSC
    /// messages, and join a UDP multicast group.
    ///
    /// Server threads take care of the message reception and dispatch by
    /// transparently creating a system thread to handle incoming messages.
    /// Use this if you do not want to handle the threading yourself.
    ///
    /// \param group The multicast group to join.  See documentation on IP
    /// multicast for the acceptable address range; e.g., http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    /// \param port If NULL is passed then an unused port will be chosen by the
    /// system, its number may be retrieved with lo_server_thread_get_port()
    /// so it can be passed to clients. Otherwise a decimal port number, service
    /// name or UNIX domain socket path may be passed.
    /// \param err_h A function that will be called in the event of an error being
    /// raised. The function prototype is defined in lo_types.h
    pub fn lo_server_thread_new_multicast(
        group: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server_thread;
}
extern "C" {
    /// \brief Create a new server thread instance, and join a UDP
    /// multicast group, optionally specifying which network interface to
    /// use.  Note that usually only one of iface or ip are specified.
    ///
    /// \param group The multicast group to join.  See documentation on IP
    /// multicast for the acceptable address range; e.g., http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    /// \param port If using UDP then NULL may be passed to find an unused port.
    /// Otherwise a decimal port number or service name or may be passed.
    /// If using UNIX domain sockets then a socket path should be passed here.
    /// \param iface A string specifying the name of a network interface to
    /// use, or zero if not specified.
    /// \param ip A string specifying the IP address of a network interface
    /// to use, or zero if not specified.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    pub fn lo_server_thread_new_multicast_iface(
        group: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        iface: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server_thread;
}
extern "C" {
    /// \brief Create a new server thread to handle incoming OSC
    /// messages, specifying protocol.
    ///
    /// Server threads take care of the message reception and dispatch by
    /// transparently creating a system thread to handle incoming messages.
    /// Use this if you do not want to handle the threading yourself.
    ///
    /// \param port If NULL is passed then an unused port will be chosen by the
    /// system, its number may be retrieved with lo_server_thread_get_port()
    /// so it can be passed to clients. Otherwise a decimal port number, service
    /// name or UNIX domain socket path may be passed.
    /// \param proto The protocol to use, should be one of LO_UDP, LO_TCP or LO_UNIX.
    /// \param err_h A function that will be called in the event of an error being
    /// raised. The function prototype is defined in lo_types.h
    pub fn lo_server_thread_new_with_proto(
        port: *const ::std::os::raw::c_char,
        proto: ::std::os::raw::c_int,
        err_h: lo_err_handler,
    ) -> lo_server_thread;
}
extern "C" {
    /// \brief Create a new server thread, taking port and the optional
    /// multicast group IP from an URL string.
    ///
    /// \param url The URL to specify the server parameters.
    /// \param err_h An error callback function that will be called if there is an
    /// error in messge reception or server creation. Pass NULL if you do not want
    /// error handling.
    /// \return A new lo_server_thread instance.
    pub fn lo_server_thread_new_from_url(
        url: *const ::std::os::raw::c_char,
        err_h: lo_err_handler,
    ) -> lo_server_thread;
}
extern "C" {
    /// \brief Free memory taken by a server thread
    ///
    /// Frees the memory, and, if currently running will stop the associated thread.
    pub fn lo_server_thread_free(st: lo_server_thread);
}
extern "C" {
    /// \brief Add an OSC method to the specifed server thread.
    ///
    /// \param st The server thread the method is to be added to.
    /// \param path The OSC path to register the method to. If NULL is passed the
    /// method will match all paths.
    /// \param typespec The typespec the method accepts. Incoming messages with
    /// similar typespecs (e.g. ones with numerical types in the same position) will
    /// be coerced to the typespec given here.
    /// \param h The method handler callback function that will be called it a
    /// matching message is received
    /// \param user_data A value that will be passed to the callback function, h,
    /// when its invoked matching from this method.
    pub fn lo_server_thread_add_method(
        st: lo_server_thread,
        path: *const ::std::os::raw::c_char,
        typespec: *const ::std::os::raw::c_char,
        h: lo_method_handler,
        user_data: *const ::std::os::raw::c_void,
    ) -> lo_method;
}
extern "C" {
    /// \brief Delete an OSC method from the specifed server thread.
    ///
    /// \param st The server thread the method is to be removed from.
    /// \param path The OSC path of the method to delete. If NULL is passed the
    /// method will match the generic handler.
    /// \param typespec The typespec the method accepts.
    pub fn lo_server_thread_del_method(
        st: lo_server_thread,
        path: *const ::std::os::raw::c_char,
        typespec: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// \brief Delete an OSC method from the specified server thread.
    ///
    /// \param s The server thread the method is to be removed from.
    /// \param m The lo_method identifier returned from lo_server_add_method for
    ///          the method to delete from the server.
    /// \return Non-zero if it was not found in the list of methods for the server.
    pub fn lo_server_thread_del_lo_method(
        st: lo_server_thread,
        m: lo_method,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Set an init and/or a cleanup function to the specifed server thread.
    ///
    /// To have any effect, it must be called before the server thread is started.
    ///
    /// \param st The server thread to which the method is to be added.
    /// \param init The init function to be called just after thread start.
    ///             May be NULL.
    /// \param cleanup The cleanup function to be called just before thread
    ///                exit.  May be NULL.
    /// \param user_data A value that will be passed to the callback functions.
    pub fn lo_server_thread_set_callbacks(
        st: lo_server_thread,
        init: lo_server_thread_init_callback,
        cleanup: lo_server_thread_cleanup_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    /// \brief Start the server thread
    ///
    /// \param st the server thread to start.
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_server_thread_start(st: lo_server_thread) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Stop the server thread
    ///
    /// \param st the server thread to start.
    /// \return Less than 0 on failure, 0 on success.
    pub fn lo_server_thread_stop(st: lo_server_thread) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the port number that the server thread has bound to.
    pub fn lo_server_thread_get_port(st: lo_server_thread) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return a URL describing the address of the server thread.
    ///
    /// Return value must be free()'d to reclaim memory.
    pub fn lo_server_thread_get_url(st: lo_server_thread) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Return the lo_server for a lo_server_thread
    ///
    /// This function is useful for passing a thread's lo_server
    /// to lo_send_from().
    pub fn lo_server_thread_get_server(st: lo_server_thread) -> lo_server;
}
extern "C" {
    /// \brief Return true if there are scheduled events (eg. from bundles) waiting
    /// to be dispatched by the thread
    pub fn lo_server_thread_events_pending(st: lo_server_thread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lo_server_thread_set_error_context(
        st: lo_server_thread,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    /// \brief Pretty-print a lo_server_thread object.
    pub fn lo_server_thread_pp(st: lo_server_thread);
}
extern "C" {
    /// \brief Declare an OSC destination, given IP address and port number.
    /// Same as lo_address_new_with_proto(), but using UDP.
    ///
    /// \param host An IP address or number, or NULL for the local machine.
    /// \param port a decimal port number or service name.
    ///
    /// The lo_address object may be used as the target of OSC messages.
    ///
    /// Note: if you wish to receive replies from the target of this
    /// address, you must first create a lo_server_thread or lo_server
    /// object which will receive the replies. The last lo_server(_thread)
    /// object craeted will be the receiver.
    pub fn lo_address_new(
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
    ) -> lo_address;
}
extern "C" {
    /// \brief Declare an OSC destination, given IP address and port number,
    /// specifying protocol.
    ///
    /// \param proto The protocol to use, must be one of LO_UDP, LO_TCP or LO_UNIX.
    /// \param host An IP address or number, or NULL for the local machine.
    /// \param port a decimal port number or service name.
    ///
    /// The lo_address object may be used as the target of OSC messages.
    ///
    /// Note: if you wish to receive replies from the target of this
    /// address, you must first create a lo_server_thread or lo_server
    /// object which will receive the replies. The last lo_server(_thread)
    /// object created will be the receiver.
    pub fn lo_address_new_with_proto(
        proto: ::std::os::raw::c_int,
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
    ) -> lo_address;
}
extern "C" {
    /// \brief Create a lo_address object from an OSC URL.
    ///
    /// example: \c "osc.udp://localhost:4444/my/path/"
    pub fn lo_address_new_from_url(url: *const ::std::os::raw::c_char) -> lo_address;
}
extern "C" {
    /// \brief Free the memory used by the lo_address object
    pub fn lo_address_free(t: lo_address);
}
extern "C" {
    /// \brief Send a OSC formatted message to the address specified.
    ///
    /// \param targ The target OSC address
    /// \param path The OSC path the message will be delivered to
    /// \param type The types of the data items in the message, types are defined in
    /// lo_osc_types.h
    /// \param ... The data values to be transmitted. The types of the arguments
    /// passed here must agree with the types specified in the type parameter.
    ///
    /// example:
    /// \code
    /// lo_send(t, "/foo/bar", "ff", 0.1f, 23.0f);
    /// \endcode
    ///
    /// \return -1 on failure.
    pub fn lo_send(
        targ: lo_address,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Send a OSC formatted message to the address specified,
    /// from the same socket as the specified server.
    ///
    /// \param targ The target OSC address
    /// \param from The server to send message from   (can be NULL to use new socket)
    /// \param ts   The OSC timetag timestamp at which the message will be processed
    /// (can be LO_TT_IMMEDIATE if you don't want to attach a timetag)
    /// \param path The OSC path the message will be delivered to
    /// \param type The types of the data items in the message, types are defined in
    /// lo_osc_types.h
    /// \param ... The data values to be transmitted. The types of the arguments
    /// passed here must agree with the types specified in the type parameter.
    ///
    /// example:
    /// \code
    /// serv = lo_server_new(NULL, err);
    /// lo_server_add_method(serv, "/reply", "ss", reply_handler, NULL);
    /// lo_send_from(t, serv, LO_TT_IMMEDIATE, "/foo/bar", "ff", 0.1f, 23.0f);
    /// \endcode
    ///
    /// \return on success, the number of bytes sent, or -1 on failure.
    pub fn lo_send_from(
        targ: lo_address,
        from: lo_server,
        ts: lo_timetag,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Send a OSC formatted message to the address specified, scheduled to
    /// be dispatch at some time in the future.
    ///
    /// \param targ The target OSC address
    /// \param ts The OSC timetag timestamp at which the message will be processed
    /// \param path The OSC path the message will be delivered to
    /// \param type The types of the data items in the message, types are defined in
    /// lo_osc_types.h
    /// \param ... The data values to be transmitted. The types of the arguments
    /// passed here must agree with the types specified in the type parameter.
    ///
    /// example:
    /// \code
    /// lo_timetag now;<br>
    /// lo_timetag_now(&now);<br>
    /// lo_send_timestamped(t, now, "/foo/bar", "ff", 0.1f, 23.0f);
    /// \endcode
    ///
    /// \return on success, the number of bytes sent, or -1 on failure.
    pub fn lo_send_timestamped(
        targ: lo_address,
        ts: lo_timetag,
        path: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the error number from the last failed lo_send() or
    /// lo_address_new() call
    pub fn lo_address_errno(a: lo_address) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Return the error string from the last failed lo_send() or
    /// lo_address_new() call
    pub fn lo_address_errstr(a: lo_address) -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// \brief Create a new OSC blob type.
    ///
    /// \param size The amount of space to allocate in the blob structure.
    /// \param data The data that will be used to initialise the blob, should be
    /// size bytes long.
    pub fn lo_blob_new(size: i32, data: *const ::std::os::raw::c_void) -> lo_blob;
}
extern "C" {
    /// \brief Free the memory taken by a blob
    pub fn lo_blob_free(b: lo_blob);
}
extern "C" {
    /// \brief Return the amount of valid data in a lo_blob object.
    ///
    /// If you want to know the storage size, use lo_arg_size().
    pub fn lo_blob_datasize(b: lo_blob) -> u32;
}
extern "C" {
    /// \brief Return a pointer to the start of the blob data to allow contents to
    /// be changed.
    pub fn lo_blob_dataptr(b: lo_blob) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    /// \brief Get information on the version of liblo current in use.
    ///
    /// All parameters are optional and can be given the value of 0 if that
    /// information is not desired.  For example, to get just the version
    /// as a string, call lo_version(str, size, 0, 0, 0, 0, 0, 0, 0);
    ///
    /// The "lt" fields, called the ABI version, corresponds to libtool's
    /// versioning system for binary interface compatibility, and is not
    /// related to the library version number.  This information is usually
    /// encoded in the filename of the shared library.
    ///
    /// Typically the string returned in 'verstr' should correspond with
    /// $major.$minor$extra, e.g., "0.28rc".  If no 'extra' information is
    /// present, e.g., "0.28", extra will given the null string.
    ///
    /// \param verstr       A buffer to receive a string describing the
    ///                     library version.
    /// \param verstr_size  Size of the buffer pointed to by string.
    /// \param major        Location to receive the library major version.
    /// \param minor        Location to receive the library minor version.
    /// \param extra        Location to receive the library version extra string.
    /// \param extra_size   Size of the buffer pointed to by extra.
    /// \param lt_major     Location to receive the ABI major version.
    /// \param lt_minor     Location to receive the ABI minor version.
    /// \param lt_bug       Location to receive the ABI 'bugfix' version.
    pub fn lo_version(
        verstr: *mut ::std::os::raw::c_char,
        verstr_size: ::std::os::raw::c_int,
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        extra: *mut ::std::os::raw::c_char,
        extra_size: ::std::os::raw::c_int,
        lt_major: *mut ::std::os::raw::c_int,
        lt_minor: *mut ::std::os::raw::c_int,
        lt_bug: *mut ::std::os::raw::c_int,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
